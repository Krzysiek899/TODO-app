@page "/history"
@inject TodoTaskService _todoTaskService

<PageTitle>History</PageTitle>

@if (todoTasks.Count() == 0) {
    <h2>Nothing to see here!</h2>
} else {
    <div class="container">
        @foreach (var todoTask in todoTasks) {
            <div class="row justify-content-start mt-3">
                <div class="card mb-3" style="width: 100%;">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-1">
                                <button type="button" class="btn btn-primary mt-4" @onclick="@(() => Restore(todoTask.TaskId))">
                                    <span class="oi oi-action-undo" aria-hidden="true"></span>
                                </button>
                            </div>
                            <div class="col">
                                <h4 class="card-title">@todoTask.Title</h4>
                                <p class="card-text">
                                    <span class="pe-1 text-secondary">Importance: </span>
                                    @switch (todoTask.Importance) {
                                        case TaskImportance.Critical:
                                        case TaskImportance.VeryHigh:
                                            <span class="text-danger">@todoTask.Importance</span>
                                            break;
                                        case TaskImportance.High:
                                        case TaskImportance.Medium:
                                            <span class="text-warning">@todoTask.Importance</span>
                                            break;
                                        default:
                                            <span class="text-secondary">@todoTask.Importance</span>
                                            break;
                                    }
                                    <br/>

                                    @if (todoTask.DueDate != null) {
                                        <span class="pe-1 text-secondary">Due:</span>
                                        <span class="text-primary">@todoTask.DueDate</span>
                                        <br/>
                                    }

                                    <span class="text-secondary">@todoTask.Description</span>
                                </p>
                                <p class="card-text">
                                    @foreach (var tag in todoTask.Tags) {
                                        <span class="bg-light px-1 ms-1 rounded-3">#@tag.Name</span>
                                    }
                                </p>
                            </div>
                            <div class="col-1">
                                <a href="@( "/EditTask/" + todoTask.TaskId.ToString() )" class="btn btn-primary mt-4">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                </a>
                            </div>
                            <div class="col-1">
                                <button type="button" class="btn btn-danger mt-4" @onclick="@(() => Delete(todoTask.TaskId))">
                                    <span class="oi oi-trash" aria-hidden="true"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    public List<TodoTask> todoTasks = new List<TodoTask>();

    protected override async Task OnInitializedAsync() {
        await UpdateView();
    }

    private async Task Delete(Guid taskId) {
        await _todoTaskService.DeleteTodoTaskAsync(taskId);
        await UpdateView();
    }

    private async Task Restore(Guid taskId) {
        await _todoTaskService.RestoreTaskAsync(taskId);
        await UpdateView();
    }

    private async Task UpdateView() {
        todoTasks = await _todoTaskService.GetCompletedTodoTasksAsync();
    }
}
