@page "/newtask"
@inject TodoTaskService _todoTaskService
@inject TagService _tagService

<PageTitle>New task</PageTitle>

<EditForm Model="@formModel" OnSubmit="@Create">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="row">
            <div class="col-3">
                <h2>New task:</h2>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-2">
                <label for="title">Title: </label>
            </div>
            <div class="col">
                <InputText id="title" @bind-Value="formModel.newTodoTask.Title" />
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-2">
                <label for="description">Description: </label>
            </div>
            <div class="col">
                <InputTextArea id="description" @bind-Value="formModel.newTodoTask.Description" />
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-2">
                <label for="importance">Importance: </label>
            </div>
            <div class="col">
                <InputSelect @bind-Value="formModel.newTodoTask.Importance">
                    <option checked="@(formModel.newTodoTask.Importance == TaskImportance.VeryLow)" value="VeryLow">Very Low</option>
                    <option checked="@(formModel.newTodoTask.Importance == TaskImportance.Low)" value="Low">Low</option>
                    <option checked="@(formModel.newTodoTask.Importance == TaskImportance.Medium)" value="Medium">Medium</option>
                    <option checked="@(formModel.newTodoTask.Importance == TaskImportance.High)" value="High">High</option>
                    <option checked="@(formModel.newTodoTask.Importance == TaskImportance.VeryHigh)" value="VeryHigh">Very High</option>
                    <option checked="@(formModel.newTodoTask.Importance == TaskImportance.Critical)" value="Critical">Critical</option>
                </InputSelect>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-2">
                <label for="duedate">Due date (optional): </label>
            </div>
            <div class="col">
                <InputDate id="duedate" @bind-Value="formModel.newTodoTask.DueDate" />
            </div>
        </div>
        @if (formModel.checkedTags.Count() != 0) {
            <div class="row mt-3">
                <div class="col-2">
                    <div>Tags (optional):</div>
                </div>
                <div class="col">
                    @foreach (CheckedTag tag in formModel.checkedTags) {
                        <label class="bg-light px-1 me-2 rounded-3">
                            <InputCheckbox @bind-Value="tag.isChecked" />
                            <span>#@tag.tag.Name</span>
                        </label>
                    }
                </div>
            </div>
        }
        <div class="row mt-3">
            <div class="col-1">
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    class CheckedTag {
        public Tag tag { get; set; } = new Tag();
        public bool isChecked = false;
    }

    class FormModel {
        public TodoTaskDTO newTodoTask { get; set; } = new TodoTaskDTO();
        public List<CheckedTag> checkedTags { get; set; } = new List<CheckedTag>();
    }

    private FormModel formModel = new FormModel();

    public List<Tag> tags = new List<Tag>();
    
    protected override async Task OnInitializedAsync() {
        await UpdateView();
    }

    private async Task Create() {
        var newTodoTask = new TodoTaskDTO {
            Title = formModel.newTodoTask.Title,
            Description = formModel.newTodoTask.Description,
            Importance = formModel.newTodoTask.Importance,
            DueDate = formModel.newTodoTask.DueDate,
            Tags = new List<Tag>()
        };
        foreach (var checkedTag in formModel.checkedTags) {
            if (checkedTag.isChecked) {
                newTodoTask.Tags.Add(checkedTag.tag);
            }
        }
        await _todoTaskService.AddTodoTaskAsync(newTodoTask);

        await UpdateView();
    }

    private async Task UpdateView() {
        formModel = new FormModel();
        tags = await _tagService.GetTagsAsync();
        foreach (var tag in tags) {
            formModel.checkedTags.Add(new CheckedTag {
                tag = tag,
                isChecked = false
            });
        }
    }
}